var card string = "Ace of Spades"
 var = we are about to create a new variable 
 card = name of variable 
 string = only string will be assigned to a variable

 Javascript/ Ruby/ Python = dynamic type language
 doesn't care about the type var a = 10 a = "megha"

 Java/ cplus/ go = static typed 

 types 

 bool 
 string
 int 
 float64

 :=  defining a new variable

 card:="Ace"
 card = "five"

 func newCard() string{

 }

 newCard is name and string is returning the string

 Array -> Fixed length list of things
 Slice -> AN array can grow and shrink

 append(cards,"Six") doesnot modfiy the original Slice
 but we need to initialize it to that ir diff slice

 Go doesnot use OOP

 we can define as type deck []string


 I need to create a deck of cards newDeck() which will have all the cards
 One thing is make an array and insert one by one 
 or just use two for loops by dividing the data as 
 cardSuits which contain spades,diamond hearts and 
 and another will be cardValues which will contain ace,two, three
 _ = hey we know there is a variable here but we just don't care about it
 and we don't have to use it

 We can return multiple values and if we are returning multiple values then we need to store that multiple values like 2 in 2 different variable
 here even if one variable is new we can write newvariable,oldvariable:=   (old variable :=)

 value := newDeck()
	//value.print()
	d, value := deal(value, 5)

	d.print()
	value.print()

If I am not printing d then it will show an error even in compilation or I can use _ but then it will show no new variable on left side
to remove that just use = instead of :=
